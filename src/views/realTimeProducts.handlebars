<main class="main-container">

    <h1 class="ff-secondary">{{title}}</h1>

    <section class="productPage-container">
        <section class="productsForm-section">

            <form class="form-section" action="/api/products" method="post">
                <input name="title" placeholder="Title" required />
                <select name="category" required>
                    <option value="">
                        Select a category
                    </option>
                    <option value="Clothes">
                        clothes
                    </option>
                </select>
                <select name="status" required>
                    <option value="">
                        Select a status
                    </option>
                    <option value="true">
                        True
                    </option>
                    <option value="false">
                        False
                    </option>
                </select>
                <input name="code" placeholder="Code" required />
                <input name="description" placeholder="Description" required />
                <input name="thumbnail" placeholder="Thumbnail" />
                <input name="stock" placeholder="Stock" required />
                <input name="price" placeholder="Price" required />

                <button class="btn-success ff-secondary fs-3" type="submit">
                    {{#if selectedProduct}}
                    Update
                    {{else}}
                    Create
                    {{/if}}
                </button>

            </form>
        </section>


        <section class="products-section">

            <button class="btn-delete ff-secondary fs-3">
                Mostrar productos
            </button>

            <ul class="products-list">

                {{#each productos}}
                <li class='product-item' data-id='{{this.id}}'>
                    {{#each this.thumbnail}}
                        <img src="{{this}}" height="40" alt="Thumbnail">
                    {{/each}}

                    <div class='product-item__body'>
                        <p class='ff-secondary fs-2 ls-1'>{{this.id}}</p>
                        <p class='ff-secondary fs-2 ls-1'>{{this.title}}</p>
                        <p>{{this.category}}</p>
                        <p>{{this.status}}</p>
                        <p>{{this.code}}</p>
                        <p>{{this.description}}</p>
                        <p>{{this.price}}</p>
                        <p>{{this.stock}}</p>
                    </div>

                    <div class='product-item__buttons'>
                        <button class='btn-edit ff-secondary fs-2'>
                            Editar
                        </button>
                        <button class='btn-delete ff-secondary fs-2'>
                            Eliminar
                        </button>
                    </div>
                </li>
                {{/each}}

            </ul>
        </section>
    </section>

</main>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    let selectedProduct = null;


    document.querySelector('.form-section').addEventListener('submit', (event) => {
			event.preventDefault();

			try {
				const product = {
					title: event.target.elements.title.value,
					category: event.target.elements.category.value,
					status: event.target.elements.status.value,
					code: event.target.elements.code.value,
					description: event.target.elements.description.value,
					thumbnail: [event.target.elements.thumbnail.value],
					stock: event.target.elements.stock.value,
					code: event.target.elements.code.value,
					price: event.target.elements.price.value,
				};

				// Emit a 'new-product' or 'edit-product' depending on the selectedProduct state
				if (selectedProduct) {
						// Set the product ID to the selectedProduct ID
						product.id = selectedProduct.id;
						socket.emit('edit-product', product);
				} else {
						socket.emit('new-product', product);
				}
			} catch (error) {
				console.error(error);
			} finally {
				// Reset your form here
				form.reset();
			}
    });


		document.querySelectorAll('.btn-edit').forEach((button) => {
			button.addEventListener('click', (event) => {
				const productItem = event.target.closest('.product-item');
				const productId = productItem.dataset.id;
				const productTitle = productItem.querySelector('.ff-secondary:nth-child(2)').textContent;
				const productCategory = productItem.querySelector('p:nth-child(3)').textContent;
				const productStatus = productItem.querySelector('p:nth-child(4)').textContent;
				const productCode = productItem.querySelector('p:nth-child(5)').textContent;
				const productDescription = productItem.querySelector('p:nth-child(6)').textContent;
				const productPrice = productItem.querySelector('p:nth-child(7)').textContent;
				const productStock = productItem.querySelector('p:nth-child(8)').textContent;
				{{!-- TODO: --}}
				// const productDescription = productItem.querySelector('p:nth-child(6)').textContent;
				//const productThumbnail = productItem.querySelector('img:nth-child(1)').textContent;
				// const productStock = productItem.querySelector('p:nth-child(7)').textContent;
				//const productPrice = productItem.querySelector('p:nth-child(8)').textContent;

				const product = {
					id: productId,
					title: productTitle,
					category: productCategory,
					status: productStatus,
					code: productCode,
					description: productDescription,
					// thumbnail: productThumbnail,
					price: productPrice,
					stock: productStock,
				};

				selectedProduct = product;
				const form = document.querySelector('.form-section');
				form.elements.title.value = product.title;
				form.elements.category.value = product.category;
				form.elements.status.value = product.status;
				form.elements.code.value = product.code;
				form.elements.description.value = product.description;
				form.elements.thumbnail.value = product.thumbnail[0];
				form.elements.stock.value = product.stock;
				form.elements.price.value = product.price;

				const submitButton = form.querySelector('.btn-success');
				submitButton.textContent = 'Update';
			});
    });

    document.querySelectorAll('.btn-delete').forEach((button) => {
			button.addEventListener('click', (event) => {
				const productId = event.target.closest('.product-item').dataset.id;
				// Confirm before emitting a 'delete-product' event with the product ID
				if (confirm('Are you sure you want to delete this product?')) {
						socket.emit('delete-product', productId);
				}
			});
    });

    socket.on('update-products', (products) => {
			const productList = document.querySelector('.products-list');
			productList.innerHTML = '';

			products.forEach((product) => {
				let thumbnails = '';
				product.thumbnail.forEach((image) => {
						thumbnails += `<img src='${image}' height="40" alt='Image of ${product.title}' class='product-item__image' />`;
				});

				productList.innerHTML += `
						<li class='product-item' data-id='${product.id}'>
								${thumbnails}
								<div class='product-item__body'>
										<p class='ff-secondary fs-2 ls-1'>${product.id}</p>
										<p class='ff-secondary fs-2 ls-1'>${product.title}</p>
										<p>${product.category}</p>
										<p>${product.status}</p>
										<p>${product.code}</p>
										<p>${product.description}</p>
										<p>${product.price}</p>
										<p>${product.stock}</p>
								</div>
								<div class='product-item__buttons'>
										<button class='btn-edit ff-secondary fs-2'>Editar</button>
										<button class='btn-delete ff-secondary fs-2'>Eliminar</button>
								</div>
						</li>
				`;
			});
    });

    // Additional code for handling edit-product event and updating the form
    socket.on('edit-product', (product) => {
			
			// Set the selectedProduct state to the received product
			selectedProduct = product;
			// Fill the form fields with the product data
			const form = document.querySelector('.form-section');
			form.elements.title.value = product.title;
			form.elements.category.value = product.category;
			form.elements.status.value = product.status;
			form.elements.code.value = product.code;
			form.elements.description.value = product.description;
			form.elements.thumbnail.value = product.thumbnail[0];
			form.elements.stock.value = product.stock;
			form.elements.price.value = product.price;

			// Change the button text to 'Update'
			const submitButton = form.querySelector('.btn-success');
			submitButton.textContent = 'Update';
    });
</script>
